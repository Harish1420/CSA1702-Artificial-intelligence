def alpha_beta_pruning(node, depth, alpha, beta, maximizing_player):
    if depth == 0 or node == 1 or node == -1:
        return node

    if maximizing_player:
        max_eval = -float('inf')
        for child in generate_children(node):
            eval = alpha_beta_pruning(child, depth - 1, alpha, beta, False)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = float('inf')
        for child in generate_children(node):
            eval = alpha_beta_pruning(child, depth - 1, alpha, beta, True)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

def generate_children(node):
    # In this example, we assume that the children of a node are generated by
    # flipping the sign of the node's value (1 becomes -1 and vice versa).
    return [-node]

if __name__ == "__main__":
    root = 1  # The root of the game tree with an initial value of 1
    depth = 3  # Depth of the game tree
    alpha = -float('inf')
    beta = float('inf')
    maximizing_player = True

    optimal_value = alpha_beta_pruning(root, depth, alpha, beta, maximizing_player)

    print("Optimal value for the root node:", optimal_value)
